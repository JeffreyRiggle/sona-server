name: Go
on: [push, pull_request]
jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Get dependencies
      run: |
        go get -v -d -t ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build
      run: go build -v .
      working-directory: ./src

    - name: Test
      run: go test
      working-directory: ./src

  Test:
    runs-on: ubuntu-latest
    steps:

      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1

      - name: Get dependencies
        run: |
          go get -v -d -t ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi

      - name: Start
        run: |
          go build -v .
          docker build . -t sona-server:"$GITHUB_SHA"
          config=`cat ../test/RuntimeConfig.json`
          docker network create mynet
          docker run -i -e CONFIG="$config" -p 8080:8080 --network mynet sona:test &
        working-directory: ./src

      - name: Start web hook server
        run: |
          docker build . -t webhook:tester
          docker run -i -p 5000:5000 --network mynet --name hookservice webhook:tester &
        working-directory: ./test/webhooktester
          
      - name: Install python
        uses: actions/setup-python@v1
        with:
          python-version: '2.x'
      
      - name: Install dependencies
        run: |
          pip install requests
          pip install assertpy
      
      - name: Run E2E Tests
        run: python apitest.py
        working-directory: ./test

      - name: Publish
        env:
          dockerpassword: ${{ secrets.DOCKER }}
          dockeruser: ${{ secrets.DOCKERUSER }}
        run: |
          docker login -p $dockerpassword -u $dockeruser
          docker push sona-server:"$GITHUB_SHA"

